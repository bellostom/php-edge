#summary Details on Edge's caching system.

==Introduction==

Caching is an essential component for modern high traffic web applications. It helps scale the application and eleviate database load.

*Edge* supports three storage engines

  # Memcached ([http://memcached.org])
  # Redis ([http://redis.io])
  # File caching

The first 2 options store data in memory and are considerably faster than file caching, so opt for these options whenever possible.

==Configuration and Usage==

As any other services within *Edge*, we configure caching in the config.php file.

Below are some samples for each one of the 3 options

{{{
        /**
         * Memcached storage
         * We can pass as many servers as we want
         * The order is host:port:weight
         */
        'cache' => array(
            'invokable' => 'Edge\Core\Cache\MemoryCache',
            'args' => array(
                array('localhost:11311:1')
            ),
            'shared' => true
        )

        /**
         * Redis storage
         */
        'cache' => array(
            'invokable' => 'Edge\Core\Cache\RedisCache',
            'args' => array('localhost:6379') ,
            'shared' => true
        )

        /**
         * File storage
         */
        'cache' => array(
            'invokable' => 'Edge\Core\Cache\FileCache',
            'args' => array('/data/cache'),
            'shared' => true
        )
}}}


To access the cache and use it, you do as with every other service like
{{{
use Edge\Core\Edge;
$cache = Edge::app()->cache;

//assume $data stores some expensive to calculate data
$cache->add("some_unique_key", $data, 10*60);

//to retrieve the data
$data = $cache->get("some_unique_key");

//to delete the data
$cache->delete("some_uniqueu_key");
}}}

==Query Caching==

By default *Edge* caches each instance of any Model that derives from Record. This means that every time you query a model and the result you get back is 1 entry, this willbe cached.

So when you query the below

{{{
User::getItemById(1);

User::select()
     ->where(["username" => "admin"])
     ->run();
}}}

these queries return a User instance and by default they are cached.

When you update the specific instance *Edge* automatically invalidates its cached items referring to the specific instance. The same happens when you delete the record, all caches of the record are deleted.

If you do not want this behavior you can define the below method in your Model classes which will disable caching.

{{{
public static function cacheRecord(){
    return false;
}
}}}

You can implicitly specify a query to be cached 

{{{
User::select()
     ->where("id")
     ->in(1,50,200)
     ->cache([
         'ttl' => 20*60'
      ])
     ->run();
}}}